"""
Una peque√±a tienda quiere entender c√≥mo se comportan 
sus ventas a lo largo del mes
para detectar productos m√°s rentables y oportunidades de mejora.
Este script analiza el dataset de ventas y genera res√∫menes num√©ricos y visuales.
"""

import pandas as pd
import matplotlib.pyplot as plt
import os

# ===============================
# 1Ô∏è‚É£ Configuraci√≥n de rutas y carga de datos
# ===============================
base_path = os.path.dirname(os.path.abspath(__file__))
data_path = os.path.join(base_path, 'ventas.csv')

ventas = pd.read_csv(data_path)
print("\nüìò Vista inicial del dataset:")
print(ventas.head())

# ===============================
# 2Ô∏è‚É£ Informaci√≥n b√°sica del DataFrame
# ===============================
print("\nüìä Informaci√≥n general del DataFrame:")
print(ventas.info())

# ===============================
# 3Ô∏è‚É£ Control y ajuste de tipos de datos
# ===============================
ventas['date'] = pd.to_datetime(ventas['date'], infer_datetime_format=True)
ventas['category'] = ventas['category'].astype('string')

print("\nüîç Validaci√≥n de tipos de datos despu√©s de conversi√≥n:")
print(ventas.info())

# ===============================
# 4Ô∏è‚É£ C√°lculos principales
# ===============================
ventas_totales = ventas['price'].sum()
print(f"\nüí∞ Ventas totales: ${ventas_totales:.2f}")

# Ventas por categor√≠a
ventas_por_categoria = ventas.groupby('category')['price'].sum().reset_index()
print("\nüìà Ventas totales por categor√≠a:")
print(ventas_por_categoria)

# Productos m√°s vendidos por cantidad
print("\nüèÜ Productos m√°s vendidos por cantidad:")
productos_top = ventas.groupby('product_name')['quantity'].sum().reset_index()
productos_top = productos_top.sort_values(by='quantity', ascending=False).head(2)
print(productos_top)

# ===============================
# 5Ô∏è‚É£ Resumen general
# ===============================
resumen = {
    "Ventas totales ($)": ventas_totales,
    "Categor√≠a l√≠der": ventas_por_categoria.loc[ventas_por_categoria['price'].idxmax(), 'category'],
    "Ventas Categor√≠a L√≠der ($)": round(ventas_por_categoria['price'].max(), 2),
    "Top 2 Productos M√°s Vendidos": productos_top.to_dict('records')
}

print("\nüßæ RESUMEN DE VENTAS")
for key, value in resumen.items():
    print(f"{key}: {value}")

# ===============================
# 6Ô∏è‚É£ Visualizaci√≥n de datos con Matplotlib
# ===============================

# --- Gr√°fico 1: Barras de ventas por categor√≠a ---
plt.figure(figsize=(8, 5))
plt.bar(ventas_por_categoria['category'], ventas_por_categoria['price'], color='teal')
plt.title('Ingresos Totales por Categor√≠a', fontsize=13, fontweight='bold')
plt.xlabel('Categor√≠a', fontsize=11)
plt.ylabel('Ventas ($)', fontsize=11)
plt.grid(axis='y', linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

# --- Gr√°fico 2: Pie chart de distribuci√≥n por categor√≠a ---
plt.figure(figsize=(6, 6))
plt.pie(
    ventas_por_categoria['price'],
    labels=ventas_por_categoria['category'],
    autopct='%1.1f%%',
    startangle=140,
    colors=['#4DB6AC', '#008080', '#80CBC4', '#004D40']
)
plt.title('Distribuci√≥n de Ventas por Categor√≠a', fontsize=13, fontweight='bold')
plt.tight_layout()
plt.show()

# ===============================
# 7Ô∏è‚É£ Guardar resumen en un archivo de texto
# ===============================
resumen_path = os.path.join(base_path, 'resumen_ventas.txt')
with open(resumen_path, 'w', encoding='utf-8') as f:
    f.write("RESUMEN DE VENTAS\n")
    for key, value in resumen.items():
        f.write(f"{key}: {value}\n")

print(f"\nüìÇ Resumen guardado en: {resumen_path}")

 